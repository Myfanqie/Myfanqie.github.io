<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>莉莉娅</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2020-05-05T14:50:42.922Z</updated>
  <id>/</id>
  
  <author>
    <name>莉莉娅</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java解析JSON（使用API）</title>
    <link href="/2020/05/05/Java%E8%A7%A3%E6%9E%90JSON%EF%BC%88%E4%BD%BF%E7%94%A8API%EF%BC%89/"/>
    <id>/2020/05/05/Java解析JSON（使用API）/</id>
    <published>2020-05-05T14:02:22.000Z</published>
    <updated>2020-05-05T14:50:42.922Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起初"><a href="#起初" class="headerlink" title="起初"></a>起初</h2><p>最近搞那个qq机器人，然后我的大部分功能都是调用API，所以也来 写一下，我是这么用这个的。</p><p>一开始，我是用的最原始的方法，这个方法就是java基础里面的IO流和网络<br><del>一开始写的比这个还要糟糕一些</del><br>这个就是抽出来的一个工具类，这就传入url，就可以获取一个jsonObject对象。</p><pre><code class="java">public JSONObject connectMethod(String url){        String resultStr = &quot;&quot;;        BufferedReader in = null;        try {            URL rea = new URL(url);//封装为URL类            HttpURLConnection connection = (HttpURLConnection) rea.openConnection();            connection.setRequestMethod(&quot;GET&quot;);//设置请求属性            //设置通用请求方式（模拟window浏览器访问，直接复制，不需要改）            connection.setRequestProperty(&quot;Charset&quot;,&quot;UTF-8&quot;);            connection.setRequestProperty(&quot;accept&quot;,&quot;*/*&quot;);            connection.setRequestProperty(&quot;connection&quot;,&quot;Keep_Alive&quot;);            connection.setRequestProperty(&quot;user-agent&quot;,                    &quot;Mozilla/4.0(compatible;MSIE 6.0;Windows NT 5.1;SV1)&quot;);            connection.connect();//建立实际的连接            Map&lt;String, List&lt;String&gt;&gt; map = connection.getHeaderFields();            in = new BufferedReader(new InputStreamReader(                    connection.getInputStream(),&quot;UTF-8&quot;            ));            String line;            while ((line = in.readLine())!=null){                resultStr += line;            }            JSONObject parseObject = JSON.parseObject(resultStr);            return parseObject;        } catch (Exception e) {            e.printStackTrace();        }        return null;    }</code></pre><h2 id="OKHttp"><a href="#OKHttp" class="headerlink" title="OKHttp"></a>OKHttp</h2><p>起初，我一直都是用上面那个工具类，不过过了一段，时间，我发现群友使用的不是这种方式，而是另一种更加简单、高效的方法，也就是这个OKHttp。</p><p>也就是okhttp，然后我迫不及待的找到官网，（果然很简单）。<br>需要导入相关的依赖   <a href="https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp/4.6.0" target="_blank" rel="noopener">https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp/4.6.0</a><br>这样也是搞成一个工具类来使用，十分的方便</p><pre><code class="java">OkHttpClient client = new OkHttpClient();public String run(String url) throws IOException {  Request request = new Request.Builder()      .url(url)      .build();  try (Response response = client.newCall(request).execute()) {    return response.body().string();  }}</code></pre><h2 id="FastJSON的使用。"><a href="#FastJSON的使用。" class="headerlink" title="FastJSON的使用。"></a>FastJSON的使用。</h2><p>但是这个时候的问题就是，如何来使用这些JSON，<br>这里就要使用阿里巴巴的fastJson了，不得不说，阿里巴巴是真的强啊。</p><p>对于JSON来说，一共有三个东西， 对象，数组，字符串</p><pre><code class="java">public class OkHttpTest {    public static void main(String[] args) throws IOException {        OkHttpAPI okHttp = new OkHttpAPI();  //上面的工具类        String connection = okHttp.connection(&quot;https://s.nmsl8.club/getloveword?type=4&quot;);        JSONObject jsonObject = JSONObject.parseObject(connection);  //转化成JSON对象。        System.out.println(jsonObject.getString(&quot;content&quot;)); //根据关键字来拿到值。    }}</code></pre><p>一般常用的就是这三个方法。<br>数组    <code>public JSONArray getJSONArray(String key)</code><br>字符串  <code>public String getString(String key)</code><br>对象   <code>public JSONObject getJSONObject(String key)</code></p><p>当然还有一个通用的get()，不过要强制类型转换才行</p><h2 id="java爬虫（Jsoup）"><a href="#java爬虫（Jsoup）" class="headerlink" title="java爬虫（Jsoup）"></a>java爬虫（Jsoup）</h2><p>一开始以为是什么很高深莫测的东西，结果一看其实也没有那么难，也许生活也是如此吧。。。</p><p>1、首先是导入依赖，maven就可以找到， Jsoup</p><p>参数一共有三个，第一个需要抓取的URL，第二个你要选择的元素（使用CSS选择器），第三个你要属性还是文本<br>这里就是一个抓取百度百科的一个实例，一句代码就可以写完，</p><pre><code class="java">String str =  Jsoup.Jsoup.parse(new URL(&quot;https://baike.baidu.com/item/&quot; + name),180000).select(&quot;meta[name=description]&quot;).get(0).attr(&quot;content&quot;);</code></pre><p>当然分开写，我觉得更好理解一点</p><pre><code class="java">URL url = new URL(&quot;https://baike.baidu.com/item/&quot; + name); //你要搞的URLDocument document = Jsoup.parse(url, 18000);  //获取文档对象Element element = document.select(&quot;meta[name=description]&quot;).get(0);  //具体获取的哪个元素String str = element.attr(&quot;content&quot;);  //最终拿到了要的属性</code></pre>]]></content>
    
    <summary type="html">
    
      文章描述
    
    </summary>
    
      <category term="文件夹归类" scheme="/categories/%E6%96%87%E4%BB%B6%E5%A4%B9%E5%BD%92%E7%B1%BB/"/>
    
    
      <category term="标签" scheme="/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>如何打造一个萌妹子</title>
    <link href="/2020/04/21/%E5%A6%82%E4%BD%95%E6%89%93%E9%80%A0%E4%B8%80%E4%B8%AA%E8%90%8C%E5%A6%B9%E5%AD%90/"/>
    <id>/2020/04/21/如何打造一个萌妹子/</id>
    <published>2020-04-21T05:46:41.000Z</published>
    <updated>2020-04-21T06:32:21.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="哪个猛男不想打造成一个萌妹子的形象（狗头"><a href="#哪个猛男不想打造成一个萌妹子的形象（狗头" class="headerlink" title="哪个猛男不想打造成一个萌妹子的形象（狗头"></a>哪个猛男不想打造成一个萌妹子的形象（狗头</h2><p>众所周知妹子无论在那个群里都是十分受欢迎的，那么要如何才能打造成一个妹子形象呢？</p><h2 id="1、头像选择"><a href="#1、头像选择" class="headerlink" title="1、头像选择"></a>1、头像选择</h2><p>动漫可爱的女生头像最佳！傻雕头像最次</p><p>例如：<br><img src="https://raw.githubusercontent.com/Myfanqie/picgoimgs/master/-7946956cbab84ab2.jpg" alt><br><img src="https://raw.githubusercontent.com/Myfanqie/picgoimgs/master/-5b6ae923e90d0ca4.jpg" alt></p><p>不推荐头像<br>例如：<br><img src="https://raw.githubusercontent.com/Myfanqie/picgoimgs/master/-c4f6b3de9facf92.jpg" alt></p><h2 id="2、ID、名称选择"><a href="#2、ID、名称选择" class="headerlink" title="2、ID、名称选择"></a>2、ID、名称选择</h2><p>可爱的id、昵称最佳，，，祖安id、昵称最次</p><h2 id="3、说话的艺术（多使用语气词和颜文字）"><a href="#3、说话的艺术（多使用语气词和颜文字）" class="headerlink" title="3、说话的艺术（多使用语气词和颜文字）"></a>3、说话的艺术（多使用语气词和颜文字）</h2><p>语气词：了、吗、吧、嗯、哈、啊、唔、嘛、呗、呀、啦<br>颜文字：(´・ω・`)  (๑• . •๑)   (⌯¤̴̶̷̀ω¤̴̶̷́)✧   ╮(￣▽￣)╭<br>称呼使用： 哥哥、小哥哥<br>颜文字可以在这里看看  <a href="https://spacekid.me/kaomoji/" target="_blank" rel="noopener">https://spacekid.me/kaomoji/</a></p><h2 id="表情包"><a href="#表情包" class="headerlink" title="表情包"></a>表情包</h2><p>表情包当然也是可爱的表情包优先了<br><a href="https://www.zhihu.com/question/313653031/answer/1103573241" target="_blank" rel="noopener">知乎-有哪些可爱的表情包</a><br>傻雕表情包最次<br><a href="https://www.zhihu.com/question/286837417" target="_blank" rel="noopener">知乎-有哪些傻雕的表情包</a></p><p>不过有一说一，我觉得傻雕表情包还是蛮有意思的。</p>]]></content>
    
    <summary type="html">
    
      文章描述
    
    </summary>
    
      <category term="文件夹归类" scheme="/categories/%E6%96%87%E4%BB%B6%E5%A4%B9%E5%BD%92%E7%B1%BB/"/>
    
    
      <category term="标签" scheme="/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>小黄鸭调试法</title>
    <link href="/2020/03/31/%E5%B0%8F%E9%BB%84%E9%B8%AD%E8%B0%83%E8%AF%95%E6%B3%95/"/>
    <id>/2020/03/31/小黄鸭调试法/</id>
    <published>2020-03-31T15:43:33.000Z</published>
    <updated>2020-03-31T15:52:45.233Z</updated>
    
    <content type="html"><![CDATA[<h2 id="小黄鸭调试法"><a href="#小黄鸭调试法" class="headerlink" title="小黄鸭调试法"></a>小黄鸭调试法</h2><p>故事来自于《<a href="https://baike.baidu.com/item/程序员修炼之道/7872985" target="_blank" rel="noopener">程序员修炼之道</a>》传说中程序大师随身携带一只小黄鸭，在调试代码的时候会在桌上放上这只小黄鸭，然后详细地向鸭子解释每行代码。</p><ul><li>你可能有这种经历，当你有问题想别人请教的时候，你开始向别人阐述你的问题，以及过程。然后还没有等你问完，你自己已经从自己说的这个思路中找到了解决方案。然后就走掉了。</li><li>反过来，你的朋友跑来问你一个问题，但是当他自己把问题说完，或者说到一半的时候就想出了答案走了，留下一脸茫然的你。</li></ul><p>总的来说，这让你在表达自己的想法的时候重新思考了问题，整理了思路。从而得到了自发的得到了解决方案。</p>]]></content>
    
    <summary type="html">
    
      技巧
    
    </summary>
    
      <category term="文件夹归类" scheme="/categories/%E6%96%87%E4%BB%B6%E5%A4%B9%E5%BD%92%E7%B1%BB/"/>
    
    
      <category term="标签" scheme="/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC</title>
    <link href="/2020/03/31/SpringMVC/"/>
    <id>/2020/03/31/SpringMVC/</id>
    <published>2020-03-31T02:28:06.000Z</published>
    <updated>2020-03-31T15:54:22.413Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><p>先回顾一下什么是MVC</p><h4 id="1-什么MVC？"><a href="#1-什么MVC？" class="headerlink" title="1. 什么MVC？"></a>1. 什么MVC？</h4><blockquote><p>MVC是模型（model）、视图（view）、控制器（controller）的简写，是一种软件设计规范， 1、Model（模型）表示应用程序核心（比如数据库记录列表）。<br>2、View（视图）显示数据（数据库记录）。<br>3、Controller（控制器）处理输入（写入数据库记录）。</p></blockquote><ul><li>mvc是将业务逻辑、数据、显示分离的方法来组织代码。</li><li><strong>mvc主要的作用是降低了视图与业务逻辑之间的双向耦合</strong>。</li><li>MVC不是一种设计模式而是一种架构模式。</li></ul><p>最典型的例子就是JSP+servlet+javabean<br><img src="https://raw.githubusercontent.com/Myfanqie/picgoimgs/master/mvc02.jpg" alt></p><h4 id="2-SpringMVC简述"><a href="#2-SpringMVC简述" class="headerlink" title="2.SpringMVC简述"></a>2.SpringMVC简述</h4><p><strong>spring MVC是Spring Framework的一部分，设计用java写的一个轻量级别的Web框架。</strong></p><h5 id="SpringMVC的特点："><a href="#SpringMVC的特点：" class="headerlink" title="SpringMVC的特点："></a>SpringMVC的特点：</h5><ol><li>轻量级，简单易学</li><li>高效，基于请求响应的MVC框架</li><li>与spring兼容性好，无缝结合</li><li>约定大于配置</li><li>功能强大： RESTful、数据验证、格式化、本地化、主题</li><li>简介灵活。</li></ol><h4 id="SpringMVC原理"><a href="#SpringMVC原理" class="headerlink" title="SpringMVC原理"></a>SpringMVC原理</h4><p>先展示一下我画的图，<del>有点丑</del><br><img src="https://raw.githubusercontent.com/Myfanqie/picgoimgs/master/Springmvc3.jpg" alt></p><p>DispatcherServlet表示前端控制器<br>HandleMapping为处理器映射器。<br>HandlerExecution为具体的处理器<br>HandlerAdapter为处理器适配器<br>ViewResolver为视图解析器</p><ol><li>用户发出一个请求，假设这个url为<a href="http://localhost:8080/hello" target="_blank" rel="noopener">http://localhost:8080/hello</a></li><li>DispatcherServlet调用HandlerMapping，HandlerMapping根据请求来查找Handler</li><li>HandlerExecution就是具体的Handler，就是根据url找到控制器，现在找到控制器是hello</li><li>HandlerExecution将解析后的信息传递给DispatcherServlet.</li><li>通过hello就通过HandlerAdapter处理器适配器，按照其规则去执行Handler</li><li>Handler让具体的Controller来执行，这就就是执行具体的业务啥的，</li><li>然后Controller又将具体的执行信息返回给HandlerAdapter，例如ModelAndView</li><li>HandlerAdapter又将视图逻辑名或者模型传给DispatchServlet。</li><li>DispatchServlet这里就调用视图解析器ViewResolver来解析HandlerAdapter传递的逻辑视图名</li><li>DispatchServlet根据视图解析器的视图结果，调用具体的视图。</li><li>最终视图呈现给用户。</li></ol><h4 id="写一个Hello-World"><a href="#写一个Hello-World" class="headerlink" title="写一个Hello World"></a>写一个Hello World</h4><p>其实上面啥原理是很难的，看不懂话，就先来看看怎么写一个Hello World吧</p><blockquote><p>工具&amp;环境<br>maven 3.6.1<br>jdk 1.8<br>tomcat 7.0<br>idea 2019.3.1</p></blockquote><ol><li>创建一个maven项目。（不导入任何模板）</li><li><p>添加必要依赖pom.xml</p><pre><code class="xml">&lt;dependencies&gt; &lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt; &lt;dependency&gt;     &lt;groupId&gt;org.springframework&lt;/groupId&gt;     &lt;artifactId&gt;spring-context&lt;/artifactId&gt;     &lt;version&gt;5.2.0.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/junit/junit --&gt; &lt;dependency&gt;     &lt;groupId&gt;junit&lt;/groupId&gt;     &lt;artifactId&gt;junit&lt;/artifactId&gt;     &lt;version&gt;4.12&lt;/version&gt;     &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt; &lt;dependency&gt;     &lt;groupId&gt;javax.servlet&lt;/groupId&gt;     &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;     &lt;version&gt;3.1.0&lt;/version&gt;     &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt;     &lt;!-- https://mvnrepository.com/artifact/javax.servlet.jsp/jsp-api --&gt;     &lt;dependency&gt;         &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;         &lt;artifactId&gt;jsp-api&lt;/artifactId&gt;         &lt;version&gt;2.2&lt;/version&gt;         &lt;scope&gt;provided&lt;/scope&gt;     &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/javax.servlet/jstl --&gt; &lt;dependency&gt;     &lt;groupId&gt;javax.servlet&lt;/groupId&gt;     &lt;artifactId&gt;jstl&lt;/artifactId&gt;     &lt;version&gt;1.2&lt;/version&gt; &lt;/dependency&gt;     &lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-web --&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.springframework&lt;/groupId&gt;         &lt;artifactId&gt;spring-web&lt;/artifactId&gt;         &lt;version&gt;5.2.0.RELEASE&lt;/version&gt;     &lt;/dependency&gt;     &lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.springframework&lt;/groupId&gt;         &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;         &lt;version&gt;5.2.0.RELEASE&lt;/version&gt;     &lt;/dependency&gt; &lt;/dependencies&gt;</code></pre></li><li><p>新建一个子项目，具体就是在当前的的项目上new-&gt;Model-&gt;maven</p></li><li><p>子项目添加web模板,如图<br><img src="https://raw.githubusercontent.com/Myfanqie/picgoimgs/master/springmvc01.jpg" alt><br><img src="https://raw.githubusercontent.com/Myfanqie/picgoimgs/master/springmvc05.jpg" alt></p></li><li>编写web.xml<pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;      xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;      xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee       http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;      version=&quot;4.0&quot;&gt; &lt;!-- 第一部就是配置前端控制器 DispatcherServlet 这个是SpringMVC的核心--&gt; &lt;servlet&gt;     &lt;servlet-name&gt;spirngmvc&lt;/servlet-name&gt;     &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;     &lt;!--  DispatchServlet还要绑定一个配置文件--&gt;     &lt;init-param&gt;         &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;         &lt;param-value&gt;classpath:springmvc-servlet.xml&lt;/param-value&gt;     &lt;/init-param&gt;     &lt;!-- 设置启动级别为1，与服务是一起启动的 --&gt;     &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;/servlet&gt; &lt;!--    在Springmvc中 /和/* 是不同的两个  1、/的意思是匹配所有的请求。但是不包括jsp  2、/*的意思是匹配所有的请求，包括jsp。（可能会导致无穷的嵌套） --&gt; &lt;servlet-mapping&gt;     &lt;servlet-name&gt;spirngmvc&lt;/servlet-name&gt;     &lt;url-pattern&gt;/&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;&lt;/web-app&gt;</code></pre></li><li>新建一个springmvc-servlet.xml<br>这个文件放在resource目录下面比较好</li></ol><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xmlns:p=&quot;http://www.springframework.org/schema/p&quot;       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;       xsi:schemaLocation=&quot;        http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context        https://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;        &lt;!--处理器映射器--&gt;    &lt;bean class=&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;/&gt;        &lt;!--处理器适配器--&gt;    &lt;bean class=&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;/&gt;        &lt;!--视图解释器--&gt;    &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot; id=&quot;internalResourceViewResolver&quot;&gt;        &lt;!--前缀--&gt;        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot;/&gt;        &lt;!--后缀--&gt;        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt;    &lt;/bean&gt;    &lt;bean id=&quot;/hello&quot; class=&quot;com.liliya.controller.HelloController&quot;/&gt;&lt;/beans&gt;</code></pre><ol start="7"><li>在主目录下编写HelloController这个类</li></ol><pre><code class="java">import org.springframework.web.servlet.ModelAndView;import org.springframework.web.servlet.mvc.Controller;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;public class HelloController implements Controller {    @Override    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception {        ModelAndView modelAndView = new ModelAndView(&quot;test&quot;);        modelAndView.addObject(&quot;msg&quot;,&quot;Hello World!!!&quot;);        return modelAndView;    }}</code></pre><ol start="8"><li><p>最后再编写一个jsp就可以运行了<br>在上面的springmvc-servlet中我们配置了视图解释器的前缀<br>所以这里要这样操作，在WEB-INF文件夹下面新建jsp文件夹<br>新建test.jsp  <strong>在body里面写上${msg}</strong></p></li><li><p>配置tomcat，部署项目。</p></li><li><p>运行，idea自动打开浏览器，然后在浏览器的后缀加上hello就可以看到效果了</p></li></ol><p><img src="https://raw.githubusercontent.com/Myfanqie/picgoimgs/master/springmvc06.jpg" alt></p><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><p>上面的例子可以初步的了解springmvc原理，但是实际的用的时候我们并不是这么用的，<br>因为，注解才是springmvc的灵魂、</p><p>下面写一些如何使用注解来完成HelloWorld项目</p><ol><li>创建maven项目</li><li>导入各种依赖</li><li>配置web.xml，还是一样的不用改</li><li>配置springmvc-servlet.xml</li></ol><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xmlns:p=&quot;http://www.springframework.org/schema/p&quot;       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;       xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context        https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;&gt;&lt;!--    开启自动包扫描--&gt;    &lt;context:component-scan base-package=&quot;com.liliya.controller&quot;/&gt;&lt;!--    过滤静态文件，不让他们通过这个mvc--&gt;    &lt;mvc:default-servlet-handler/&gt;    &lt;mvc:annotation-driven/&gt;    &lt;!--视图解释器--&gt;    &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot; id=&quot;internalResourceViewResolver&quot;&gt;        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot;/&gt;        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt;    &lt;/bean&gt;&lt;/beans&gt;</code></pre><ol start="5"><li>编写测试类</li></ol><pre><code class="java">import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.RequestMapping;@Controllerpublic class HelloController {    @RequestMapping(&quot;/hello&quot;)    public String hello(Model model){        model.addAttribute(&quot;msg&quot;,&quot;HELLO WORLD&quot;);        return &quot;hello&quot;; //被视图解释器处理为/WEB-INF/jsp/hello.jsp    }}</code></pre><ol start="6"><li>部署到tomcat</li><li>运行，到浏览器查看渲染效果</li></ol><p>可以看到注解是简单了很多的。几乎无需配置。</p><h4 id="404排查"><a href="#404排查" class="headerlink" title="404排查"></a>404排查</h4><p>有时候你可能会发现，没有任何错误，URL没有写错。<br>但是就是报了404</p><p>解决方案是在out这个输出文件夹中新建一个文件夹lib，然后把所有的jar包丢进去。</p>]]></content>
    
    <summary type="html">
    
      SpringMVC的学习笔记
    
    </summary>
    
      <category term="文件夹归类" scheme="/categories/%E6%96%87%E4%BB%B6%E5%A4%B9%E5%BD%92%E7%B1%BB/"/>
    
    
      <category term="标签" scheme="/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>人类的赞歌就是勇气的赞歌</title>
    <link href="/2020/03/03/%E4%BA%BA%E7%B1%BB%E7%9A%84%E8%B5%9E%E6%AD%8C%E5%B0%B1%E6%98%AF%E5%8B%87%E6%B0%94%E7%9A%84%E8%B5%9E%E6%AD%8C/"/>
    <id>/2020/03/03/人类的赞歌就是勇气的赞歌/</id>
    <published>2020-03-03T15:18:51.000Z</published>
    <updated>2020-03-03T16:26:50.163Z</updated>
    
    <content type="html"><![CDATA[<h2 id="黄金精神"><a href="#黄金精神" class="headerlink" title="黄金精神"></a>黄金精神</h2><blockquote><p>人类的赞歌就是勇气的赞歌 –jojo</p></blockquote><p>有时候我们总是会迷茫，会不知所措。就像因为这次的疫情而宅在家里的人。</p><h3 id="未知"><a href="#未知" class="headerlink" title="未知"></a>未知</h3><p>我也不例外，虽然是疫情来了，不过我在家里还是学了不少的东西的。。。不像往年的假期。。<br>看了两本书，《JavaScript语言精粹》、《图解TCP/IP》然后网课我是看了spring以及java的数据结构。</p><p>现在学校开了网课，不知道啥时候会学校。现在还有一个情况就是我姐因为要远程办公，所以暂时要征用我电脑<br>从早上的九点，到晚上的九点。也不算是工作12小时，中间还有吃饭的时间。大概是八九个小时。<br>那么我在这段时间都是怎么过的呢。<br>首先是早上，家里这么舒服当然是睡懒觉啦。中午吃完饭<br>下午就开始上网课了<br>晚上的话，吃完饭，玩会手机，大概就可以摸到电脑了。</p><p>这是现在没有电脑的时候。</p><p>不过我姐前几天在苹果的官网上买了一个笔记本。MacBook pro<br>预计是在这个月的8号到达，不过我是估计这两天应该是可以到达的。毕竟现在已经要开始发货了。<br>就算是临时的组装，也不可能从海外装好然后送过来，毕竟是定制机，</p><p><strong>未知</strong> 我们总是在害怕未知的东西，有时候我胡思乱想的时候也是这样的，<br>不知道，我现在走的这条路对不对。。。<br>如果走错了，又会怎么样。。。</p><p>我的情况很复杂，我也不想说。。。。有时候真的是现实比小说更加的荒诞。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>其实就是我们老师鼓励我了，难得的开心。ヾ(ﾟ∀ﾟゞ)</p>]]></content>
    
    <summary type="html">
    
      一次日记
    
    </summary>
    
      <category term="文件夹归类" scheme="/categories/%E6%96%87%E4%BB%B6%E5%A4%B9%E5%BD%92%E7%B1%BB/"/>
    
    
      <category term="标签" scheme="/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>第三次安装黑苹果失败</title>
    <link href="/2020/02/26/%E7%AC%AC%E4%B8%89%E6%AC%A1%E5%AE%89%E8%A3%85%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%A4%B1%E8%B4%A5/"/>
    <id>/2020/02/26/第三次安装黑苹果失败/</id>
    <published>2020-02-26T14:23:50.000Z</published>
    <updated>2020-02-26T15:17:35.231Z</updated>
    
    <content type="html"><![CDATA[<p>这几天心血来潮又想装黑苹果了；；；<del>可能是因为吃太饱了</del><br>之前其实尝试着装过，但是都是失败了。  虽然这次也是失败的但是我还是学到了不少的东西。</p><blockquote><p><strong>安装黑苹果的步骤</strong></p><ol><li>第一个步是分区，分一个空的磁盘出来（不过如果你财力雄厚的话，可以直接买一个新的硬盘）</li><li>第二步是下载苹果的镜像，并且将苹果的镜像写到你的u盘里面(这个u盘不得小于8G)</li><li>第三步就是替换efi文件。</li><li>第四部就是重启到BIOS，关闭安全启动，然后将u盘的启动顺序调为第一个。开始安装。</li></ol></blockquote><h2 id="空的磁盘"><a href="#空的磁盘" class="headerlink" title="空的磁盘"></a>空的磁盘</h2><p>这里的意思就是为了给即将安装的苹果系统腾出空间。。。</p><h2 id="苹果镜像下载地址"><a href="#苹果镜像下载地址" class="headerlink" title="苹果镜像下载地址"></a>苹果镜像下载地址</h2><p><a href="https://mirrors.dtops.cc/iso/MacOS/daliansky_macos/" target="_blank" rel="noopener">https://mirrors.dtops.cc/iso/MacOS/daliansky_macos/</a><br>这个服务器的地址我查了是在法国，所以我建议使用欧洲国家那边的节点。比如德国</p><h2 id="什么是efi文件"><a href="#什么是efi文件" class="headerlink" title="什么是efi文件"></a>什么是efi文件</h2><p>首先要讲一下系统的引导方式，主要有 BIOS、EFI、UEFI这三种。<br>BIOS是早年系统的引导方式，例如windows的xp系统，<br>EFI是苹果使用的引导方式，这里的EFI文件，就是引导苹果系统启动的<br>UEFI和EFI类似，是现在电脑主流的引导方式。特点是加了安全启动</p><p>而EFI文件就是为了让苹果系统认为你是苹果电脑，举个栗子；<br>你想进去女生寝室，但是宿管大妈看到你是男的，就不会让你进去，<br>但是如果你女装了一下，让宿管大妈觉得你是女的，这个时候你就进去了。<br>而这个女装，就相当于是EFI文件了。</p><p>但是要注意的是，由于每个电脑的CPU、显卡、主板都不同，所以所要的EFI文件也不同</p><h2 id="重启到BIOS"><a href="#重启到BIOS" class="headerlink" title="重启到BIOS"></a>重启到BIOS</h2><p>这里要根据自己电脑的主板来确定，需要百度，像我的是华为笔记本；F2进入BIOS；</p><h3 id="安装失败的原因"><a href="#安装失败的原因" class="headerlink" title="安装失败的原因"></a>安装失败的原因</h3><p>无法获取相应的EFI文件，一般大佬制作的EFI文件都是电脑cpu是因特尔的，而我这个<br>电脑是AMD的CPU，这就导致了除非是我自己制作电脑的EFI要不然就不能搞这个黑苹果了</p><p>但是你知道EFI要怎么做吗，首先你要有一个苹果的系统，然后进去制作。<br>这个就比较麻烦了，因为我现在的问题就是无法装苹果系统，无论是装的虚拟机，还是装的双系统</p>]]></content>
    
    <summary type="html">
    
      文章描述
    
    </summary>
    
      <category term="文件夹归类" scheme="/categories/%E6%96%87%E4%BB%B6%E5%A4%B9%E5%BD%92%E7%B1%BB/"/>
    
    
      <category term="标签" scheme="/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>关于这次的武汉肺炎</title>
    <link href="/2020/02/18/%E5%85%B3%E4%BA%8E%E8%BF%99%E6%AC%A1%E7%9A%84%E6%AD%A6%E6%B1%89%E8%82%BA%E7%82%8E/"/>
    <id>/2020/02/18/关于这次的武汉肺炎/</id>
    <published>2020-02-17T17:42:14.000Z</published>
    <updated>2020-02-17T18:17:21.531Z</updated>
    
    <content type="html"><![CDATA[<p><strong>有时候总以为灾难离我们很远，但是实际上一看，却又总是和我们很近</strong></p><p>这次的来自武汉的肺炎，真的是害人不浅<br>起因是有人<strong>吃蝙蝠。。。</strong>但是其实蝙蝠身上携带的病毒是很多的。。。</p><h2 id="这场瘟疫带来的后果"><a href="#这场瘟疫带来的后果" class="headerlink" title="这场瘟疫带来的后果"></a>这场瘟疫带来的后果</h2><ol><li>春节期间都不拜年走亲戚了</li><li>高速公路、机场等人流密集处都设置了体温的检测点，一发现有高烧的情况就带去医院</li><li>很多部门都开始停业，这对经济带来了不小的冲击，想很多的酒店，饭馆春节的时候都是人最多的<br> 也就是一年中最忙的时候，但是现在一停业，仓库里的货就会慢慢的腐烂，造成了亏损。</li><li>延时开学时间，分流开学。延迟复工时间，不过现在这个时间点，已经有不少的企业开始复工了。</li><li>买不到口罩，或者是限购，反正我这里是买不到口罩，制作口罩的厂子现在的直接供应给国家了</li></ol><h2 id="新型冠状病毒"><a href="#新型冠状病毒" class="headerlink" title="新型冠状病毒"></a>新型冠状病毒</h2><ol><li>感染方式: <strong>空气传播，黏膜感染（我们的黏膜都是暴露在空气中的）</strong></li><li>感染症状: <strong>发热、乏力、呼吸困难、干咳</strong>，有可能因为病毒的肺炎导致死亡</li><li>治疗方式: <strong>像感冒一样等他自己好，但是如果很严重的话，需要提供氧气</strong></li><li>感染周期: <strong>从感染到发病要4到14天</strong></li><li>如何预防: <strong>不出门，家里蹲</strong></li></ol><h2 id="与我相关"><a href="#与我相关" class="headerlink" title="与我相关"></a>与我相关</h2><p>因为现在是家里蹲了，所以作息跟学校就完全不同了。</p><p>首先是肆无忌惮的睡懒觉，一般我就是一觉睡到中午，吃中饭  |ू･ω･` )</p><p>第二个就是我姐现在要用我的电脑上班了，就是远程办公的那个样子  |(￣Д ￣)ノ</p><p>那就是只能晚上玩电脑了，还是机械键盘按起来舒服啊  ヽ(￣▽￣)ﾉ</p><p>然后就是熬夜咯，就事家里人总是说我熬夜，那就没有办法了咯，我是这样的嘿嘿~</p>]]></content>
    
    <summary type="html">
    
      生活太难了
    
    </summary>
    
      <category term="文件夹归类" scheme="/categories/%E6%96%87%E4%BB%B6%E5%A4%B9%E5%BD%92%E7%B1%BB/"/>
    
    
      <category term="标签" scheme="/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>idea找不到或者无法加载主类</title>
    <link href="/2020/02/15/idea%E6%89%BE%E4%B8%8D%E5%88%B0%E6%88%96%E8%80%85%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E4%B8%BB%E7%B1%BB/"/>
    <id>/2020/02/15/idea找不到或者无法加载主类/</id>
    <published>2020-02-15T12:39:29.000Z</published>
    <updated>2020-02-17T18:21:09.660Z</updated>
    
    <content type="html"><![CDATA[<p>有时候强迫症就把C盘的缓存删了，但是这次没想到，idea就报了错<br>起初的时候报错是无法在C盘/user/username/……这个目录下面创建文件夹啥的。</p><p>然后我是这么解决的重启idea，然后用管理员权限打开idea这回就没有这个错误了</p><p>但是但是但是</p><p>后面跑一下又发现了  <strong>找不到或者无法加载主类</strong></p><blockquote><p>起初我还以为是classpath或者java的环境变量出了问题<br>然后我就去检查了一下我的java环境变量以及classpath变量。。。<br>然后发现，没有任何的问题。。。</p></blockquote><p>然后我想到是缓存的问题，起初我是决定在之前的那个目录下面重新创建一样的文件夹，<br>但是很快之前的那个问题又出现了，无法创建文件夹，即使现在是用管理员的权限</p><p>我特么<em>**</em><br><img src="https://raw.githubusercontent.com/Myfanqie/picgoimgs/master/fzdk.png" alt></p><p>后面吃完饭我想了一下，决定还是<strong>迁移idea的缓存文件位置</strong>，让idea自己重新配置缓存文件<br>百度之后，找到bin目录下面的idea.properties 这个文件，然后修改到了D盘</p><p>果然</p><p>再次打开idea的时候就变成从未使用的一样了，然后导入以前的老配置，，就可以再次使用了</p><p>教训就是，<strong>不要随意的删除C盘下的文件</strong><br>可能真的是我吃太饱了吧</p>]]></content>
    
    <summary type="html">
    
      一次脑残的操作
    
    </summary>
    
      <category term="文件夹归类" scheme="/categories/%E6%96%87%E4%BB%B6%E5%A4%B9%E5%BD%92%E7%B1%BB/"/>
    
    
      <category term="标签" scheme="/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>樱花键盘开箱</title>
    <link href="/2020/01/29/%E6%A8%B1%E8%8A%B1%E9%94%AE%E7%9B%98%E5%BC%80%E7%AE%B1/"/>
    <id>/2020/01/29/樱花键盘开箱/</id>
    <published>2020-01-29T03:23:40.000Z</published>
    <updated>2020-02-17T18:21:57.560Z</updated>
    
    <content type="html"><![CDATA[<p>今年新买的樱花键盘到手了，好开心</p><p>先放几张图</p><p><img src="https://raw.githubusercontent.com/Myfanqie/picgoimgs/master/yinghua3.jpg" alt><br><img src="https://raw.githubusercontent.com/Myfanqie/picgoimgs/master/yinghua1.png" alt><br><img src="https://raw.githubusercontent.com/Myfanqie/picgoimgs/master/yinghua2.jpg" alt></p><p>总之好看就对了</p><p>说起来我买键盘之前还研究了这个玩意，写写下来吧</p><h3 id="首先就是键数的规格"><a href="#首先就是键数的规格" class="headerlink" title="首先就是键数的规格"></a>首先就是键数的规格</h3><p>两个常见的键位 <strong>87/108</strong></p><h3 id="轴体类型以及应用的场景"><a href="#轴体类型以及应用的场景" class="headerlink" title="轴体类型以及应用的场景"></a>轴体类型以及应用的场景</h3><p><strong>青轴（段落轴）：</strong> 有明显的的段落感和清脆的click声（游戏办公都比较适合）</p><p><strong>红轴（线性轴）：</strong>无段落感、相对于黑轴更加的轻盈（ 发烧友使用）</p><p><strong>黑轴（线性轴）：</strong> 触发快、需要较大压力（适合专业的游戏玩家）</p><p><strong>茶轴（段落轴）：</strong>  比较放松、微弱的段落感、（适合入门级玩家，没有什么特点）</p><p><strong>青轴（段落轴）：</strong> 段落感强烈 就是像按圆珠笔那样（反馈感强，打字爽）</p><p><strong>银轴（线性轴）：</strong> 与红轴相似，但是按键的行程更短</p><p><img src="https://pic3.zhimg.com/50/v2-f8c0e5f1412e16cc3a3c1221bc9aaf67_hd.webp" alt></p><h3 id="键帽的材质-一般是两种"><a href="#键帽的材质-一般是两种" class="headerlink" title="键帽的材质(一般是两种)"></a>键帽的材质(一般是两种)</h3><p><strong>ABS工程塑料：</strong> 工艺比较成熟，生产的成本低，但是长期使用后容易打油 </p><p><strong>PBT键帽：</strong> 制造的成本较高，但是磨砂质感很好</p><p>其他键盘买点</p><p><strong>防水、宏编程、全键无冲、低响应时间</strong></p><p>根据键盘的级别可以分为</p><p><strong>入门级、发烧级、骨灰级</strong></p><p><strong>总之买好看的就对了</strong></p>]]></content>
    
    <summary type="html">
    
      我好o(*￣▽￣*)o了
    
    </summary>
    
      <category term="文件夹归类" scheme="/categories/%E6%96%87%E4%BB%B6%E5%A4%B9%E5%BD%92%E7%B1%BB/"/>
    
    
      <category term="标签" scheme="/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>寒假实际的情况</title>
    <link href="/2020/01/10/%E5%AE%9E%E9%99%85%E7%9A%84%E6%83%85%E5%86%B5/"/>
    <id>/2020/01/10/实际的情况/</id>
    <published>2020-01-09T17:27:18.000Z</published>
    <updated>2020-02-17T18:22:33.774Z</updated>
    
    <content type="html"><![CDATA[<p>这里讲讲寒假实际的情况</p><p>其实我心里是很想搞学习的</p><p>实际上，天天睡懒觉睡到中午   哈哈哈，不是我想睡觉是家里从床太舒服了</p><blockquote><p>有一说一，这个暑假是准备学一个spring 以及 spring boot ，<br>    为什么学这个，<del>因为ssm太复杂了</del>,<br>    这个东西，我看了一下配置还是蛮简单的，刚开始的时候我就是简单的看了一下，<br>    然后发现，spring的很多东西看不懂，哎<br>    我还是太天真了。。。。</p></blockquote><p>所以这个寒假我的计划是</p><h4 id="我先立一个flag"><a href="#我先立一个flag" class="headerlink" title="我先立一个flag"></a><strong>我先立一个flag</strong></h4><p>学完 spring、spring boot、java数据结构</p><p>如果学习进度不错的话，就学react</p><p><img src="https://raw.githubusercontent.com/Myfanqie/picgoimgs/master/milaoshu.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      被迫学习
    
    </summary>
    
      <category term="文件夹归类" scheme="/categories/%E6%96%87%E4%BB%B6%E5%A4%B9%E5%BD%92%E7%B1%BB/"/>
    
    
      <category term="标签" scheme="/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>新年的计划以及总结</title>
    <link href="/2019/12/25/%E6%96%B0%E5%B9%B4%E7%9A%84%E8%AE%A1%E5%88%92/"/>
    <id>/2019/12/25/新年的计划/</id>
    <published>2019-12-24T17:34:20.000Z</published>
    <updated>2019-12-24T18:43:03.243Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习的态度"><a href="#学习的态度" class="headerlink" title="学习的态度"></a>学习的态度</h2><p>今年感觉有了许多的长进。。。。。。。。</p><p>首先这个是一个历史的遗留的问题。。。。我之前是。。。一个差学生来着<br>没有闯过什么大祸，不抽烟、不喝酒。<br>就是学校的一些规章制度我不会去遵守，偶尔老师会头痛。<br>对于学习的态度，，，，我之前是认为读书无用。。。。。。态度自然不佳。。。</p><p>但是读书无用论毕竟只是概率的偏差。。。<br>用少数人不读书的人的成功的例子来得出的读书无用的结论，毕竟是以偏概全</p><p><strong>为什么突然想学习呢？</strong><br>算是自问自答吧，，，，就像饿的时候会想不由自主的进食一样，<br>对知识渴望的时候也会不由主的想要获取知识。<br><del>突然感觉自己什么都不懂</del></p><p>我学的什么？<br>很显然，我们只会学习与自己相关的知识，我主要还是学习计算机，实际上我现在什么都想学</p><h2 id="今年经过的学习误区"><a href="#今年经过的学习误区" class="headerlink" title="今年经过的学习误区"></a>今年经过的学习误区</h2><p>应该感觉自己学的东西少了，所以总是想着速成，快速的学会一个东西，<br>然后我就去试着做了，但是很快我就发现了，这样子学习。。。。所学的知识很快就忘了。</p><p>相当于是，只看了一遍，而没有真正的去理解这个东西。在没有搞清楚问题的情况，<br>下去学习（看知识点）。。。。。。也就是  为了学习而去学习，，，感觉很恐怖的说。。。</p><p>首先就是要明确问题与答案之间的关系，有时候也是指的问题发生的背景<br>然后就是要用多个例子来验证两者之间的关系是否正确。。。</p><p>也就是说，，，，我们自己需要记住的是例子，而不是知识。。。</p><h2 id="学习方法-方法只是完成目的的手段，目的才是核心"><a href="#学习方法-方法只是完成目的的手段，目的才是核心" class="headerlink" title="学习方法  方法只是完成目的的手段，目的才是核心"></a>学习方法  方法只是完成目的的手段，目的才是核心</h2><p>照搬别人的学习方法肯定是不好的     <del>我之前试过了</del></p><p>我在知乎上参考了很多别人的想法，还有很多学习的观念，以及学习的方法。。。。。<br>然后我们老师也教了很多学习的方法<br>但是毕竟我还是有一些特殊，我需要高度自定义的学习方法，不过他们说的多多少少都是有帮助的，</p><p>首先是作息时间，<br>推荐是六点七点起床，，我一般是九点或者是十点 <del>熬夜已成习惯</del></p><p>学习环境大多数人推荐是去图书馆。。。。。<br>但是我是在宿舍 <del>没想到吧</del><br>我们选学习环境就是有两个要点，，，一个是否稳定不会再专注学习的时候被打断，<br>第二个就是在这个环境里面自己是否可以专注，专注对于学习来说相当的重要</p><p>然后就是找找资料<br>因为学的是计算机所以资料很好找，，<br>我这里的资料已经不同往日，包括但不限于图书、视频、图片<br>一般是去 b站、中国大学mooc、how2j、知乎 这几个平台找答案。。</p><p>同时修整了一个问题，，我没有的问题 <del>但是我的同学有的问题</del><br>他们都认为，，学习就是老师教，然后你听做笔记，这个叫学习。</p><h2 id="别人的期望"><a href="#别人的期望" class="headerlink" title="别人的期望"></a>别人的期望</h2><p>其实老师、父母都给了建议，，，、<br>老师给的建议就是  好好学习，一定要保持不断的学习。。。无论最终学的怎么样<br><del>我们老师说其实读了那么多的书还是给别人打工</del><br>家里人：起码要做一个有出息的人（其实有出息这个概念还是太模糊了）</p><h2 id="我希望成为一个什么样的人"><a href="#我希望成为一个什么样的人" class="headerlink" title="我希望成为一个什么样的人"></a>我希望成为一个什么样的人</h2><p>在学习方面，我希望我可以自主的学习，不在过于依赖他人，我希望我可以学习更多的知识，<br>我希望我是一个学习能力很强的人（学习能力超过90%的人）</p><p>学习能力在某种程度上来说，就是可以解决实际问题的能力</p><p>说白了，我希望我有朝一日也是一个真正的大佬</p><p>就是在学校学习的日子可能不多了</p><h2 id="现在是"><a href="#现在是" class="headerlink" title="现在是"></a>现在是</h2><p>现在还是一个渣渣，很多东西都不会，有时候还是会自卑的。<br>所以我还是会给自己灌鸡汤的</p><p>比如：种一棵树最好的时间是十年前，其次是现在</p><h2 id="我写这个东西的意义是什么"><a href="#我写这个东西的意义是什么" class="headerlink" title="我写这个东西的意义是什么"></a>我写这个东西的意义是什么</h2><blockquote></blockquote><p>唐僧不是有一句话吗：<strong>贫僧从东土大唐而来，要往西天而去</strong></p>]]></content>
    
    <summary type="html">
    
      文章描述
    
    </summary>
    
      <category term="文件夹归类" scheme="/categories/%E6%96%87%E4%BB%B6%E5%A4%B9%E5%BD%92%E7%B1%BB/"/>
    
    
      <category term="标签" scheme="/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>idea2019.3破解教程</title>
    <link href="/2019/12/10/idea2019-3%E7%A0%B4%E8%A7%A3%E6%95%99%E7%A8%8B/"/>
    <id>/2019/12/10/idea2019-3破解教程/</id>
    <published>2019-12-10T15:05:04.000Z</published>
    <updated>2019-12-15T06:17:21.783Z</updated>
    
    <content type="html"><![CDATA[<p>今天我自己用的这个IDEA突然提示说到了使用的期限了，我就想着搞一个破解，结果还是踩了很多的坑</p><p>一开始我把这个idea2019版的卸载了，然后打算装上一个idea2018版的搞一个永久的破解版用用</p><p>搞了很久然后我把2018版永久的idea搞好了，但是这个时候tm的，我突然发现idea2019的居然也出了破解</p><p>的方法，唉，其实我心里还是习惯里这个版本，想着还是把这个2018的卸载了，下回来了2019的</p><h2 id="下载idea——2019"><a href="#下载idea——2019" class="headerlink" title="下载idea——2019"></a>下载idea——2019</h2><p>官网下载地址：<a href="https://www.jetbrains.com/idea/download/" target="_blank" rel="noopener">https://www.jetbrains.com/idea/download/</a></p><h2 id="下载补丁"><a href="#下载补丁" class="headerlink" title="下载补丁"></a>下载补丁</h2><p>链接：<a href="https://pan.baidu.com/s/11WHoqYO9FJ506Cfuk2fflA" target="_blank" rel="noopener">https://pan.baidu.com/s/11WHoqYO9FJ506Cfuk2fflA</a><br>提取码：ppa8</p><p>补丁下载好后就放在idea的bin目录下面</p><h2 id="打开并且配置idea"><a href="#打开并且配置idea" class="headerlink" title="打开并且配置idea"></a>打开并且配置idea</h2><ol><li><p>先一波试用进去到欢迎界面</p></li><li><p>配置VM option<br><img src="https://raw.githubusercontent.com/Myfanqie/picgoimgs/master/idea.jpg" alt></p></li></ol><ol start="3"><li>添加这个选项</li></ol><p><img src="https://raw.githubusercontent.com/Myfanqie/picgoimgs/master/idea2.jpg" alt></p><h2 id="重启IDEA"><a href="#重启IDEA" class="headerlink" title="重启IDEA"></a>重启IDEA</h2><p>打开进去然后看到help选项里面的Register<br>这个就是激活框</p><h2 id="复制下面的其中一个激活码"><a href="#复制下面的其中一个激活码" class="headerlink" title="复制下面的其中一个激活码"></a>复制下面的其中一个激活码</h2><pre><code>A82DEE284F-eyJsaWNlbnNlSWQiOiJBODJERUUyODRGIiwibGljZW5zZWVOYW1lIjoiaHR0cHM6Ly96aGlsZS5pbyIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiJVbmxpbWl0ZWQgbGljZW5zZSB0aWxsIGVuZCBvZiB0aGUgY2VudHVyeS4iLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IklJIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUlMwIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiV1MiLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJSRCIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IlJDIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiREMiLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJEQiIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IlJNIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiRE0iLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJBQyIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IkRQTiIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IkdPIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUFMiLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IlBDIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUlNVIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In1dLCJoYXNoIjoiODkwNzA3MC8wIiwiZ3JhY2VQZXJpb2REYXlzIjowLCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-5epo90Xs7KIIBb8ckoxnB/AZQ8Ev7rFrNqwFhBAsQYsQyhvqf1FcYdmlecFWJBHSWZU9b41kvsN4bwAHT5PiznOTmfvGv1MuOzMO0VOXZlc+edepemgpt+t3GUHvfGtzWFYeKeyCk+CLA9BqUzHRTgl2uBoIMNqh5izlDmejIwUHLl39QOyzHiTYNehnVN7GW5+QUeimTr/koVUgK8xofu59Tv8rcdiwIXwTo71LcU2z2P+T3R81fwKkt34evy7kRch4NIQUQUno//Pl3V0rInm3B2oFq9YBygPUdBUbdH/KHROyohZRD8SaZJO6kUT0BNvtDPKF4mCT1saWM38jkw==-MIIElTCCAn2gAwIBAgIBCTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE4MTEwMTEyMjk0NloXDTIwMTEwMjEyMjk0NlowaDELMAkGA1UEBhMCQ1oxDjAMBgNVBAgMBU51c2xlMQ8wDQYDVQQHDAZQcmFndWUxGTAXBgNVBAoMEEpldEJyYWlucyBzLnIuby4xHTAbBgNVBAMMFHByb2QzeS1mcm9tLTIwMTgxMTAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5ndaik1GD0nyTdqkZgURQZGW+RGxCdBITPXIwpjhhaD0SXGa4XSZBEBoiPdY6XV6pOfUJeyfi9dXsY4MmT0D+sKoST3rSw96xaf9FXPvOjn4prMTdj3Ji3CyQrGWeQU2nzYqFrp1QYNLAbaViHRKuJrYHI6GCvqCbJe0LQ8qqUiVMA9wG/PQwScpNmTF9Kp2Iej+Z5OUxF33zzm+vg/nYV31HLF7fJUAplI/1nM+ZG8K+AXWgYKChtknl3sW9PCQa3a3imPL9GVToUNxc0wcuTil8mqveWcSQCHYxsIaUajWLpFzoO2AhK4mfYBSStAqEjoXRTuj17mo8Q6M2SHOcwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQBonMu8oa3vmNAa4RQP8gPGlX3SQaA3WCRUAj6Zrlk8AesKV1YSkh5D2l+yUk6njysgzfr1bIR5xF8eup5xXc4/G7NtVYRSMvrd6rfQcHOyK5UFJLm+8utmyMIDrZOzLQuTsT8NxFpbCVCfV5wNRu4rChrCuArYVGaKbmp9ymkw1PU6+HoO5i2wU3ikTmRv8IRjrlSStyNzXpnPTwt7bja19ousk56r40SmlmC04GdDHErr0ei2UbjUua5kw71Qn9g02tL9fERI2sSRjQrvPbn9INwRWl5+k05mlKekbtbu2ev2woJFZK4WEXAd/GaAdeZZdumv8T2idDFL7cAirJwcrbfpawPeXr52oKTPnXfi0l5+g9Gnt/wfiXCrPElX6ycTR6iL3GC2VR4jTz6YatT4Ntz59/THOT7NJQhr6AyLkhhJCdkzE2cob/KouVp4ivV7Q3Fc6HX7eepHAAF/DpxwgOrg9smX6coXLgfp0b1RU2u/tUNID04rpNxTMueTtrT8WSskqvaJd3RH8r7cnRj6Y2hltkja82HlpDURDxDTRvv+krbwMr26SB/40BjpMUrDRCeKuiBahC0DCoU/4+ze1l94wVUhdkCfL0GpJrMSCDEK+XEurU18Hb7WT+ThXbkdl6VpFdHsRvqAnhR2g4b+Qzgidmuky5NUZVfEaZqV/g==</code></pre><pre><code>3AGXEJXFK9-eyJsaWNlbnNlSWQiOiIzQUdYRUpYRks5IiwibGljZW5zZWVOYW1lIjoiaHR0cHM6Ly96aGlsZS5pbyIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiIiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IklJIiwiZmFsbGJhY2tEYXRlIjoiMjA4OS0wNy0wNyIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IkFDIiwiZmFsbGJhY2tEYXRlIjoiMjA4OS0wNy0wNyIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IkRQTiIsImZhbGxiYWNrRGF0ZSI6IjIwODktMDctMDciLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJQUyIsImZhbGxiYWNrRGF0ZSI6IjIwODktMDctMDciLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJHTyIsImZhbGxiYWNrRGF0ZSI6IjIwODktMDctMDciLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJETSIsImZhbGxiYWNrRGF0ZSI6IjIwODktMDctMDciLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJDTCIsImZhbGxiYWNrRGF0ZSI6IjIwODktMDctMDciLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJSUzAiLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUkMiLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUkQiLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUEMiLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUk0iLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiV1MiLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiREIiLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiREMiLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUlNVIiwiZmFsbGJhY2tEYXRlIjoiMjA4OS0wNy0wNyIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9XSwiaGFzaCI6IjEyNzk2ODc3LzAiLCJncmFjZVBlcmlvZERheXMiOjcsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0=-WGTHs6XpDhr+uumvbwQPOdlxWnQwgnGaL4eRnlpGKApEEkJyYvNEuPWBSrQkPmVpim/8Sab6HV04Dw3IzkJT0yTc29sPEXBf69+7y6Jv718FaJu4MWfsAk/ZGtNIUOczUQ0iGKKnSSsfQ/3UoMv0q/yJcfvj+me5Zd/gfaisCCMUaGjB/lWIPpEPzblDtVJbRexB1MALrLCEoDv3ujcPAZ7xWb54DiZwjYhQvQ+CvpNNF2jeTku7lbm5v+BoDsdeRq7YBt9ANLUKPr2DahcaZ4gctpHZXhG96IyKx232jYq9jQrFDbQMtVr3E+GsCekMEWSD//dLT+HuZdc1sAIYrw==-MIIElTCCAn2gAwIBAgIBCTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE4MTEwMTEyMjk0NloXDTIwMTEwMjEyMjk0NlowaDELMAkGA1UEBhMCQ1oxDjAMBgNVBAgMBU51c2xlMQ8wDQYDVQQHDAZQcmFndWUxGTAXBgNVBAoMEEpldEJyYWlucyBzLnIuby4xHTAbBgNVBAMMFHByb2QzeS1mcm9tLTIwMTgxMTAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5ndaik1GD0nyTdqkZgURQZGW+RGxCdBITPXIwpjhhaD0SXGa4XSZBEBoiPdY6XV6pOfUJeyfi9dXsY4MmT0D+sKoST3rSw96xaf9FXPvOjn4prMTdj3Ji3CyQrGWeQU2nzYqFrp1QYNLAbaViHRKuJrYHI6GCvqCbJe0LQ8qqUiVMA9wG/PQwScpNmTF9Kp2Iej+Z5OUxF33zzm+vg/nYV31HLF7fJUAplI/1nM+ZG8K+AXWgYKChtknl3sW9PCQa3a3imPL9GVToUNxc0wcuTil8mqveWcSQCHYxsIaUajWLpFzoO2AhK4mfYBSStAqEjoXRTuj17mo8Q6M2SHOcwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQBonMu8oa3vmNAa4RQP8gPGlX3SQaA3WCRUAj6Zrlk8AesKV1YSkh5D2l+yUk6njysgzfr1bIR5xF8eup5xXc4/G7NtVYRSMvrd6rfQcHOyK5UFJLm+8utmyMIDrZOzLQuTsT8NxFpbCVCfV5wNRu4rChrCuArYVGaKbmp9ymkw1PU6+HoO5i2wU3ikTmRv8IRjrlSStyNzXpnPTwt7bja19ousk56r40SmlmC04GdDHErr0ei2UbjUua5kw71Qn9g02tL9fERI2sSRjQrvPbn9INwRWl5+k05mlKekbtbu2ev2woJFZK4WEXAd/GaAdeZZdumv8T2idDFL7cAirJwcrbfpawPeXr52oKTPnXfi0l5+g9Gnt/wfiXCrPElX6ycTR6iL3GC2VR4jTz6YatT4Ntz59/THOT7NJQhr6AyLkhhJCdkzE2cob/KouVp4ivV7Q3Fc6HX7eepHAAF/DpxwgOrg9smX6coXLgfp0b1RU2u/tUNID04rpNxTMueTtrT8WSskqvaJd3RH8r7cnRj6Y2hltkja82HlpDURDxDTRvv+krbwMr26SB/40BjpMUrDRCeKuiBahC0DCoU/4+ze1l94wVUhdkCfL0GpJrMSCDEK+XEurU18Hb7WT+ThXbkdl6VpFdHsRvqAnhR2g4b+Qzgidmuky5NUZVfEaZqV/g==</code></pre><pre><code>KNBB2QUUR1-eyJsaWNlbnNlSWQiOiJLTkJCMlFVVVIxIiwibGljZW5zZWVOYW1lIjoiZ2hib2tlIiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IiIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiSUkiLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiQUMiLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiRFBOIiwiZmFsbGJhY2tEYXRlIjoiMjA4OS0wNy0wNyIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IlBTIiwiZmFsbGJhY2tEYXRlIjoiMjA4OS0wNy0wNyIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IkdPIiwiZmFsbGJhY2tEYXRlIjoiMjA4OS0wNy0wNyIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IkRNIiwiZmFsbGJhY2tEYXRlIjoiMjA4OS0wNy0wNyIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IkNMIiwiZmFsbGJhY2tEYXRlIjoiMjA4OS0wNy0wNyIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IlJTMCIsImZhbGxiYWNrRGF0ZSI6IjIwODktMDctMDciLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJSQyIsImZhbGxiYWNrRGF0ZSI6IjIwODktMDctMDciLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJSRCIsImZhbGxiYWNrRGF0ZSI6IjIwODktMDctMDciLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJQQyIsImZhbGxiYWNrRGF0ZSI6IjIwODktMDctMDciLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJSTSIsImZhbGxiYWNrRGF0ZSI6IjIwODktMDctMDciLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJXUyIsImZhbGxiYWNrRGF0ZSI6IjIwODktMDctMDciLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJEQiIsImZhbGxiYWNrRGF0ZSI6IjIwODktMDctMDciLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJEQyIsImZhbGxiYWNrRGF0ZSI6IjIwODktMDctMDciLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJSU1UiLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In1dLCJoYXNoIjoiMTI3OTY4NzcvMCIsImdyYWNlUGVyaW9kRGF5cyI6NywiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ==-1iV7BA/baNqv0Q5yUnAphUmh66QhkDRX+qPL09ICuEicBqiPOBxmVLLCVUpkxhrNyfmOtat2LcHwcX/NHkYXdoW+6aS0S388xe1PV2oodiPBhFlEaOac42UQLgP4EidfGQSvKwC9tR1zL5b2CJPQKZ7iiHh/iKBQxP6OBMUP1T7j3Fe1rlxfYPc92HRZf6cO+C0+buJP5ERZkyIn5ZrVM4TEnWrRHbpL8SVNq4yqfc+NwoRzRSNC++81VDS3AXv9c91YeZJz6JXO7AokIk54wltr42FLNuKbozvB/HCxV9PA5vIiM+kZY1K0w5ytgxEYKqA87adA7R5xL/crpaMxHQ==-MIIElTCCAn2gAwIBAgIBCTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE4MTEwMTEyMjk0NloXDTIwMTEwMjEyMjk0NlowaDELMAkGA1UEBhMCQ1oxDjAMBgNVBAgMBU51c2xlMQ8wDQYDVQQHDAZQcmFndWUxGTAXBgNVBAoMEEpldEJyYWlucyBzLnIuby4xHTAbBgNVBAMMFHByb2QzeS1mcm9tLTIwMTgxMTAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5ndaik1GD0nyTdqkZgURQZGW+RGxCdBITPXIwpjhhaD0SXGa4XSZBEBoiPdY6XV6pOfUJeyfi9dXsY4MmT0D+sKoST3rSw96xaf9FXPvOjn4prMTdj3Ji3CyQrGWeQU2nzYqFrp1QYNLAbaViHRKuJrYHI6GCvqCbJe0LQ8qqUiVMA9wG/PQwScpNmTF9Kp2Iej+Z5OUxF33zzm+vg/nYV31HLF7fJUAplI/1nM+ZG8K+AXWgYKChtknl3sW9PCQa3a3imPL9GVToUNxc0wcuTil8mqveWcSQCHYxsIaUajWLpFzoO2AhK4mfYBSStAqEjoXRTuj17mo8Q6M2SHOcwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQBonMu8oa3vmNAa4RQP8gPGlX3SQaA3WCRUAj6Zrlk8AesKV1YSkh5D2l+yUk6njysgzfr1bIR5xF8eup5xXc4/G7NtVYRSMvrd6rfQcHOyK5UFJLm+8utmyMIDrZOzLQuTsT8NxFpbCVCfV5wNRu4rChrCuArYVGaKbmp9ymkw1PU6+HoO5i2wU3ikTmRv8IRjrlSStyNzXpnPTwt7bja19ousk56r40SmlmC04GdDHErr0ei2UbjUua5kw71Qn9g02tL9fERI2sSRjQrvPbn9INwRWl5+k05mlKekbtbu2ev2woJFZK4WEXAd/GaAdeZZdumv8T2idDFL7cAirJwcrbfpawPeXr52oKTPnXfi0l5+g9Gnt/wfiXCrPElX6ycTR6iL3GC2VR4jTz6YatT4Ntz59/THOT7NJQhr6AyLkhhJCdkzE2cob/KouVp4ivV7Q3Fc6HX7eepHAAF/DpxwgOrg9smX6coXLgfp0b1RU2u/tUNID04rpNxTMueTtrT8WSskqvaJd3RH8r7cnRj6Y2hltkja82HlpDURDxDTRvv+krbwMr26SB/40BjpMUrDRCeKuiBahC0DCoU/4+ze1l94wVUhdkCfL0GpJrMSCDEK+XEurU18Hb7WT+ThXbkdl6VpFdHsRvqAnhR2g4b+Qzgidmuky5NUZVfEaZqV/g==</code></pre><p>然后就大功告成了</p><p><img src="https://raw.githubusercontent.com/Myfanqie/picgoimgs/master/idea1.jpg" alt></p><p>可以看到这里的日期显示的是2089年的7月7日</p><p>完全够用了</p>]]></content>
    
    <summary type="html">
    
      文章描述
    
    </summary>
    
      <category term="文件夹归类" scheme="/categories/%E6%96%87%E4%BB%B6%E5%A4%B9%E5%BD%92%E7%B1%BB/"/>
    
    
      <category term="标签" scheme="/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>nginx反向代理和负载均衡</title>
    <link href="/2019/12/06/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%92%8C%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <id>/2019/12/06/nginx反向代理和负载均衡/</id>
    <published>2019-12-06T13:26:57.000Z</published>
    <updated>2019-12-06T14:12:21.529Z</updated>
    
    <content type="html"><![CDATA[<p>对nginx有一定了解了后就来干干试试它真正的用途<br><strong>反向代理和负载均衡</strong></p><p>那么什么是反向代理呢<br>首先我们要看一个正向代理，如果你要访问p站看点色图，那么你就需要翻墙，来访问p站，这个就是正向代理</p><p>反向代理就是，你现在要访问p站，p站悄悄的把这个请求交给了b站来做，那b站就是反向代理</p><p>先上一个图（我自己画的）,这个是今天学的，目的就是可以优化页面的访问速度<br><img src="https://raw.githubusercontent.com/Myfanqie/picgoimgs/master/nginx.png" alt></p><h2 id="Nginx反向代理"><a href="#Nginx反向代理" class="headerlink" title="Nginx反向代理"></a>Nginx反向代理</h2><p>在Nginx下的conf文件里面修改location /</p><pre><code>location / {        proxy_pass http://127.0.0.1:8080;    }</code></pre><p>这个意思就是反向代理了tomcat，这个地址就是tomcat访问url<br>然后就是如果你可以在网址里面直接输入localhost，就可以访问tomcat，而不是直接访问localhost:8080</p><h2 id="静态资源和动态资源分离"><a href="#静态资源和动态资源分离" class="headerlink" title="静态资源和动态资源分离"></a>静态资源和动态资源分离</h2><p>为什么要这么做呢，因为Nginx处理静态资源的能力比tomcat出色所以，我们用nginx来处理css，js和png图片<br>tomcat来处理jsp文件</p><p>同样的需要配置nginx的conf文件,这里是直接增加</p><pre><code>location ~\.(css|js|png)$ {            root D:/Eclipse-j2ee/lib/tomcat_8111/webapps/ROOT;    }</code></pre><p>相当于是一个正则表达式，root 后面是web项目资源，</p><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>有时候一个tomcat可以吃不消，所以我们用了两个一模一样的tomcat（端口不同）来接收请求</p><p>同样的还是配置文件nginx.conf，直接添加</p><pre><code>upstream tomcat_8111_8222{    server  127.0.0.1:8111  weight=1;    server  127.0.0.1:8222  weight=2;    }</code></pre><p>这里weight就是权重的意思，端口号为8111的tomcat的权重为1，而端口号为8222的tomcat的权重为2，<br>其实实际跑的时候是随机的<del>可能权重大的tomcat跑的次数多一点吧</del></p><h2 id="redis的session共享"><a href="#redis的session共享" class="headerlink" title="redis的session共享"></a>redis的session共享</h2><p>这个有什么用？</p><p>首先假设，如果一个用户在访问页面的时候用户所在的tomcat炸了。那么用户就要重新登录，<br>之前的操作也要重新再来，这个东西就是，十分的影响用户的体验，</p><p>所以就有两种解决的方案，一个是通过配置ip，一个是用redis来保存用户的session</p><p>在刚刚那里的配置文件后面加上一句 ip_hash</p><p>就像这样</p><pre><code>upstream tomcat_8111_8222{    server  127.0.0.1:8111  weight=1;    server  127.0.0.1:8222  weight=2;    ip_hash;    }</code></pre><p>但是通过ip来锁定用户是有缺陷的<br>如果是有大量的ip来访问的话。那就会都分配到同一个tomcat上，就是相当于是没有负载均衡了<br>这样就没有意义了。</p><p>所以我们可以通过下面这种方式来保证用户的体验</p><ol><li>准备下面这三个jar包，导入到tomcat的lib下面 ，两个tomcat都要导入</li></ol><p>jedis-2.5.2.jar，<br>commons-pool2-2.0.jar，<br>tomcat-redis-session-manager1.2.jar。</p><ol start="2"><li><p>修改tomcat/conf/context.xml，两个tomcat都要改</p><pre><code>&lt;Valve className=&quot;com.orangefunction.tomcat.redissessions.RedisSessionHandlerValve&quot; /&gt;  &lt;Manager className=&quot;com.orangefunction.tomcat.redissessions.RedisSessionManager&quot;  host=&quot;127.0.0.1&quot;  port=&quot;6379&quot;  database=&quot;0&quot;  maxInactiveInterval=&quot;60&quot; /&gt; </code></pre><p>直接增加就好了</p></li><li><p>启动redis服务</p></li><li><p>重启tomcat</p></li></ol><p>现象：<br>现在如果你打开浏览器直接访问<a href="http://localhost:8111,然后输入了用户名，密码（产生一个session）" target="_blank" rel="noopener">http://localhost:8111,然后输入了用户名，密码（产生一个session）</a><br>然后在打开<a href="http://localhost:8222,你会发现已经登录了。" target="_blank" rel="noopener">http://localhost:8222,你会发现已经登录了。</a></p>]]></content>
    
    <summary type="html">
    
      文章描述
    
    </summary>
    
      <category term="文件夹归类" scheme="/categories/%E6%96%87%E4%BB%B6%E5%A4%B9%E5%BD%92%E7%B1%BB/"/>
    
    
      <category term="标签" scheme="/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>初识Nginx</title>
    <link href="/2019/12/04/%E5%88%9D%E8%AF%86Nginx/"/>
    <id>/2019/12/04/初识Nginx/</id>
    <published>2019-12-04T14:29:24.000Z</published>
    <updated>2019-12-04T14:54:03.994Z</updated>
    
    <content type="html"><![CDATA[<p>今天上课的时候老师专门用一节课给我们讲了如果去使用云服务器，主要就是一个使用nginx来部署静态页面。</p><p>那么什么是nginx<br>首先nginx是一个web服务器，同类型有Apache，一般用来做反向代理和负载均衡</p><p>先说一下，我这个服务器是Linux centos 7</p><h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h2><pre><code>yum -y install nginx</code></pre><h2 id="启动nginx服务"><a href="#启动nginx服务" class="headerlink" title="启动nginx服务"></a>启动nginx服务</h2><pre><code>systemctl start nginx.service</code></pre><h2 id="使用你的服务器ip地址打开浏览器"><a href="#使用你的服务器ip地址打开浏览器" class="headerlink" title="使用你的服务器ip地址打开浏览器"></a>使用你的服务器ip地址打开浏览器</h2><p><img src="https://raw.githubusercontent.com/Myfanqie/picgoimgs/master/nginx.jpg" alt></p><h2 id="配置你的conf文件"><a href="#配置你的conf文件" class="headerlink" title="配置你的conf文件"></a>配置你的conf文件</h2><pre><code>vim /etc/nginx/nginx.conf</code></pre><h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><p> 重新载入配置文件</p><pre><code>nginx -s reload </code></pre><p>重启 nginx</p><pre><code>nginx -s reopen</code></pre><p>停止 nginx</p><pre><code>nginx -s stop</code></pre>]]></content>
    
    <summary type="html">
    
      文章描述
    
    </summary>
    
      <category term="文件夹归类" scheme="/categories/%E6%96%87%E4%BB%B6%E5%A4%B9%E5%BD%92%E7%B1%BB/"/>
    
    
      <category term="标签" scheme="/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>通过云服务器部署J2EE项目</title>
    <link href="/2019/12/02/%E9%80%9A%E8%BF%87%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2J2EE%E9%A1%B9%E7%9B%AE/"/>
    <id>/2019/12/02/通过云服务器部署J2EE项目/</id>
    <published>2019-12-02T10:57:37.000Z</published>
    <updated>2019-12-02T11:46:20.307Z</updated>
    
    <content type="html"><![CDATA[<p>今天刚刚学了怎么部署一个j2ee的项目<br>写一下，怕忘了</p><p>首先我买的服务器是百度云的服务器（对，就是你们说的最烂的，能用就行）<br>配置是一核一G，40G存储</p><h2 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h2><p><strong>用Xshell连接服务器</strong>，建议用SSH（比较方便快捷）<br>注意：如果连续多次输错密码的话，你的当前ip地址会被封，然后无论如何都无法连接上。（别问我为什么知道）</p><h2 id="安装jdk-Linux版"><a href="#安装jdk-Linux版" class="headerlink" title="安装jdk-Linux版"></a>安装jdk-Linux版</h2><ol start="0"><li><p>准备好一个Linux版的jdk8<br><a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p></li><li><p>以root用户登录你的服务器</p></li><li><p>新建文件夹，来存放jdk</p><pre><code>mkdir /usr/local/java</code></pre></li><li><p>用<strong>FlashFXP</strong>来把Linux版的jdk传到服务器上面，注意要把jdk放在/usr/local/java 这个文件夹下面<br><a href="https://www.flashfxp.com/download" target="_blank" rel="noopener">https://www.flashfxp.com/download</a></p></li><li><p>解压jdk</p><pre><code>tar xvf jdk-linux-x64.tar.gz</code></pre><p><img src="https://raw.githubusercontent.com/Myfanqie/picgoimgs/master/jdk1.jpg" alt></p></li><li><p>配置java环境变量（我这里把tomcat的环境变量也配置好了）</p><pre><code>vim /etc/profile</code></pre><p>在done下面写下这些东西<br><img src="https://raw.githubusercontent.com/Myfanqie/picgoimgs/master/jdk2.jpg" alt></p></li><li><p>测试java是否安装成功</p><pre><code>java -version</code></pre><p><img src="https://raw.githubusercontent.com/Myfanqie/picgoimgs/master/jdk3.jpg" alt></p></li></ol><h2 id="安装tomcat-（同样是Linux版）"><a href="#安装tomcat-（同样是Linux版）" class="headerlink" title="安装tomcat （同样是Linux版）"></a>安装tomcat （同样是Linux版）</h2><ol start="0"><li>到官网下载tomcat,注意不要下错了<br><a href="https://tomcat.apache.org/download-70.cgi" target="_blank" rel="noopener">https://tomcat.apache.org/download-70.cgi</a></li></ol><p><img src="https://raw.githubusercontent.com/Myfanqie/picgoimgs/master/tomcat.jpg" alt></p><ol><li><p>新建tomcat的文件夹<br>这里跟上面的创建java文件夹是一样的</p><pre><code>mkdir /usr/local/tomcat</code></pre></li><li><p>解压文件</p><pre><code>tar xvf apache-tomcat-7.0.96.tar.gz</code></pre></li><li><p>配置环境变量，我在上面已经配好了，这里就跳过</p></li><li><p>进入bin目录</p><pre><code>cd /usr/local/tomcat/apache-tomcat-7.0.96/bin</code></pre></li><li><p>启动tomcat</p><pre><code>./startup.sh</code></pre></li><li>打开网址<pre><code>你的公网ip：8080</code></pre>如果是下面这个画面就是成功了</li></ol><p><img src="https://raw.githubusercontent.com/Myfanqie/picgoimgs/master/tomcat2.jpg" alt></p><p>就酱，没了</p>]]></content>
    
    <summary type="html">
    
      文章描述
    
    </summary>
    
      <category term="文件夹归类" scheme="/categories/%E6%96%87%E4%BB%B6%E5%A4%B9%E5%BD%92%E7%B1%BB/"/>
    
    
      <category term="标签" scheme="/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>第一次购买云服务器</title>
    <link href="/2019/12/01/%E7%AC%AC%E4%B8%80%E6%AC%A1%E8%B4%AD%E4%B9%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>/2019/12/01/第一次购买云服务器/</id>
    <published>2019-11-30T16:18:22.000Z</published>
    <updated>2019-11-30T17:14:50.082Z</updated>
    
    <content type="html"><![CDATA[<h2 id="百度云的服务器"><a href="#百度云的服务器" class="headerlink" title="百度云的服务器"></a>百度云的服务器</h2><p>其实云服务器有很多种，像阿里云、腾讯云、金山云。。。。。。之类的<br>但是为什么我要选择百度云服务器呢<del>因为没钱</del></p><h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><p>从这个服务器上面了解到有两种登录的方式，一种就是用密码登录，一种就是用SSH登录。那么什么是SSH呢</p><p>从官方文档可以知道</p><p><strong>SSH 密钥对通过加密算法生成一对密钥，一个对外界公开，称为 公钥，另一个您自己保留，称为 私钥。</strong></p><p>这个就是ssh，相当于就是公钥加密私钥解，其实我觉的还是挺不错的</p><p>使用方法如下：</p><p>打开xshell，新建会话，登录用户选择root，到第二步的时候就是会要你选择是使用密码(password)，还是使用密钥(public key),在百度云控制台创建密钥对的时候会给你一个文件，这个文件就是私钥，选择这个文件就可以了。</p><h2 id="其他用法"><a href="#其他用法" class="headerlink" title="其他用法"></a>其他用法</h2><p>搭建博客<br>搭建网盘（我觉得这个带宽实在是太小了<br>搭建游戏服务器(小型的还行)</p>]]></content>
    
    <summary type="html">
    
      文章描述
    
    </summary>
    
      <category term="文件夹归类" scheme="/categories/%E6%96%87%E4%BB%B6%E5%A4%B9%E5%BD%92%E7%B1%BB/"/>
    
    
      <category term="标签" scheme="/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>8大排序算法(一)</title>
    <link href="/2019/11/25/8%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95-%E4%B8%80/"/>
    <id>/2019/11/25/8大排序算法-一/</id>
    <published>2019-11-24T16:27:32.000Z</published>
    <updated>2019-11-24T16:59:00.854Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学数据结构，所以还是来做一些笔记吧<br>我准备这个排序算法写两个，这个是其中之一</p><p>这里的话我就讲讲冒泡排序、快速排序、插入排序、希尔排序</p><h3 id="冒泡排序法"><a href="#冒泡排序法" class="headerlink" title="冒泡排序法"></a>冒泡排序法</h3><p>不得不说这个排序算法是最经典的。</p><pre><code>import java.util.Arrays;public class Bubblesort {    public static void main(String[] args) {        //新建一个数组        int arr[] = new int [] {2,99,4,5,6,22,1,33,66,88};        System.out.println(Arrays.toString(arr));        bubblesort(arr);        System.out.println(Arrays.toString(arr));    }    //冒泡排序法    /**     * 基本的思路就是控制需要比较的轮数，也就是arr.length-1     * @param arr     */    public static void bubblesort(int arr[]) {        //总共是需要进行length-1次排序        for (int i = 0; i &lt; arr.length-1; i++) {            for (int j = 0; j &lt; arr.length-1-i; j++) {                if (arr[j]&gt;arr[j+1]) {                    int temp = arr[j];                    arr[j] = arr[j+1];                    arr[j+1] = temp;                }            }        }    }}</code></pre><h3 id="插入排序法"><a href="#插入排序法" class="headerlink" title="插入排序法"></a>插入排序法</h3><p>这个排序算法的实现比较简单<br>主要就是每两个数字的两两进行比较，如果右边的数大于左边的数，那就不替换。反之替换</p><pre><code>import java.util.Arrays;//插入排序//但是这个排序效率比较慢，就是因为如果前面都是按顺序来着的，后面突然来了一个比较小的数字那么这个工作量就开始大起来了public class InsertSort {    public static void main(String[] args) {        int arr[] = new int [] {1,5,2,9,6,4,8,3,6};        System.out.println(Arrays.toString(arr));        sort(arr);        System.out.println(Arrays.toString(arr));    }    public static void sort(int arr[]) {        //先从第二个数字遍历所有的数字        for (int i = 1; i &lt; arr.length; i++) {            //如果当前的数字小于前面的的那个数字的话            if (arr[i]&lt;arr[i-1]) {                //就先保存当前的这个数字                int temp = arr[i];                int j;   //这里是一个局部的变量                //就替换数字把左边大的数字替换右边小的数字                for(j=i-1;j&gt;=0&amp;&amp;temp&lt;arr[j];j--) {                    arr[j+1] = arr[j];                }                //把temp里的数字替换回来                arr[j+1] = temp;            }        }    }}</code></pre><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>我同学说这个是最效率最高的排序算法<br>这个排序算法的特点就是有一个基线<br>实现的方法就是去一个数作为基准的数（一般取第一个），然后遍历数组中所有的数字，如果数字比这个大那么就丢到右边，小的话就丢到左边。<br>然后就分成了两半，左边一半是比基准数小的，右边一半是比基准数大的。<br>现在又重新开始排序以左边第一个作为基准数，比这个大的就丢在右边。。。<br>就是这样不断的被分成了两半，这样的递归方法就是这个算法的思想</p><p>代码如下</p><pre><code>import java.util.Arrays;//快速排序public class QuickSort {    public static void main(String[] args) {        int arr[]  = new int [] {4,10,5,2,3,6,7,1,8,9,0,11};        System.out.println(Arrays.toString(arr));        sort(arr, 0, arr.length-1);        System.out.println(Arrays.toString(arr));    }    //这里要注意的就是要确定作为基准的数字（一般取第一个），然后就是最后一个数字    public static void sort(int arr[],int start,int end) {        if (start&lt;end) {            //首先要找到一基准数，一般 我们取第一个数字            int stard  = arr[start];            //这里就是记录需要排序的下标            int low = start;            int high = end;            //左边的下标low小于右边的下标high的时候就执行这条语句，当low与high重合的时候（low不大于high），也就意味着本次循环的快速排序结束            while(low&lt;high) {                //这条循环的意思就是如果arr[high]这个右边的数大于基数的话，那就只要把high这个下标左移一位就可以了                while(low&lt;high&amp;&amp;stard&lt;=arr[high]) {                    high--;                }                //右边的数字替换左边的数字                arr[low] = arr[high];                //这里就是跟上面的情况相反                while(low&lt;high&amp;&amp;arr[low]&lt;=stard) {                    low++;                }                //如果左边的arr[low]大于stand的时候就是把左边的数字替换到右边的数字                arr[high] = arr[low];                //然后就是不要忘记了把基准的数放回来            }            arr[low] = stard;            //处理所有小的数字            sort(arr, start, low);            //处理所有大的数字            sort(arr, low+1, end);        }    }}</code></pre><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><p>据说这是一个人的名字<br>这个算法就是为了解决上面的插入排序效率低的问题的</p><p>原理如下：首先我们要定义一个增量（足长），这个增量是怎么定义的呢<br>就是数组的长度除以2。也就是 arr.length/2 就是这个样子，取出来的数为整数<br>不能是小数<br>第一轮排序：我们把足长进行冒泡排序。相当数粗略的排序<br>第二轮排序:也就是当足长为1的时候。我们就进行插入排序、可能是因为插入排序的这个算法对相对有序的数组排序的更快一点</p><pre><code>import java.util.Arrays;//希尔排序，这个希尔排序其实就是上面快速排序的优化版本public class ShellSort {    public static void main(String[] args) {        int arr[] = new int [] {4,2,4,1,9,6,0,5};        System.out.println(Arrays.toString(arr));        sort(arr);        System.out.println(Arrays.toString(arr));    }    public static void sort(int arr[]) {        //遍历所有的增量（步长）        for(int d=arr.length/2; d&gt;0; d/=2) {            for (int i = d; i &lt; arr.length; i++) {                for (int j = i-d; j &gt;=0; j-=d) {                    if (arr[j]&gt;arr[j+d]) {                        int temp = arr[j];                        arr[j] = arr[j+d];                        arr[j+d] = temp;                    }                }            }        }    }}</code></pre><p>这里面感觉还是希尔排序最难理解<br>其他的其实感觉也不是那么的难</p><p>其还是感觉自己很菜</p><p>现在我才是来入个门啊，其实也是蛮难的、</p><p>好多的大佬就在搞人工智能、卷积神经网络<br>我就是想问    can i do this？</p><p>真的好难好难啊</p>]]></content>
    
    <summary type="html">
    
      文章描述
    
    </summary>
    
      <category term="文件夹归类" scheme="/categories/%E6%96%87%E4%BB%B6%E5%A4%B9%E5%BD%92%E7%B1%BB/"/>
    
    
      <category term="标签" scheme="/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>SQL优化</title>
    <link href="/2019/11/20/SQL%E4%BC%98%E5%8C%96/"/>
    <id>/2019/11/20/SQL优化/</id>
    <published>2019-11-20T04:18:57.000Z</published>
    <updated>2019-11-20T07:32:08.359Z</updated>
    
    <content type="html"><![CDATA[<p>今天数据库上课的时候讲了SQL优化。那我这里就把我的笔记整理一下，<br>其实将的这些东西还是蛮有意思的</p><h2 id="硬件优化"><a href="#硬件优化" class="headerlink" title="硬件优化"></a>硬件优化</h2><p>首先就是硬件的优化</p><h4 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h4><pre><code>这个东西当然是最后越大越好，如果有一张表的大小是一个G，那么就至少要占用一个G的内存</code></pre><h4 id="硬盘"><a href="#硬盘" class="headerlink" title="硬盘"></a>硬盘</h4><pre><code>然后就是硬盘，硬盘这个东西在企业这个级别这里并不是越快越好，而是最求稳定，也就是说硬盘最好是机械硬盘而不是固态硬盘。一个是固态硬盘这个东西寿命是不如机械硬盘的，第二个是在某种情况下有可能会出现掉速。</code></pre><h4 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h4><pre><code>网络主要就是看稳定性，然后就是时延，当然是响应速度越快越好</code></pre><p>但是很多的时候就是有一个问题，预算不足以在硬件上优化所以就是只能在软件上优化</p><h2 id="软件优化"><a href="#软件优化" class="headerlink" title="软件优化"></a>软件优化</h2><h4 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h4><pre><code>就是说版本的不同，sql的一些功能也会不同，版本不是说越新的版本越好</code></pre><h4 id="SQL引擎"><a href="#SQL引擎" class="headerlink" title="SQL引擎"></a>SQL引擎</h4><pre><code>不同的sql引擎有不同的作用，比如Myisam这个引擎就是说，比较轻量，比较快，在性能上面表现出色而像InnoDB这种引擎，就是支持事务，相对来说安全稳定，支持的数据量更大一些</code></pre><h4 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h4><pre><code>如果说你有一张表，这张表的数据有一个G，那么当你要查询的时候就是需要吧这张表全部加载到内存里面，那么就至少需要一个G的内存，这样对内存的消耗是很大的所以可以将大的数据库分成小的，把大的表分成小的表，这样就可以解决这个问题</code></pre><h4 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h4><pre><code>这里就是有一个读写的主从，写是主，读是从，一个主可以对应多个从也就是说，写只有一个，从有多个，而这就可以提升了性能，因为大多数的情况下，我们只要读而不是写</code></pre><h2 id="sql语句的优化"><a href="#sql语句的优化" class="headerlink" title="sql语句的优化"></a>sql语句的优化</h2><pre><code>暂时老师还没讲，等下次上课，在说</code></pre><p><img src="https://raw.githubusercontent.com/Myfanqie/picgoimgs/master/xdd.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      文章描述
    
    </summary>
    
      <category term="文件夹归类" scheme="/categories/%E6%96%87%E4%BB%B6%E5%A4%B9%E5%BD%92%E7%B1%BB/"/>
    
    
      <category term="标签" scheme="/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>deepin下面配置mysql</title>
    <link href="/2019/11/10/deepin%E4%B8%8B%E9%9D%A2%E9%85%8D%E7%BD%AEmysql/"/>
    <id>/2019/11/10/deepin下面配置mysql/</id>
    <published>2019-11-09T16:05:45.000Z</published>
    <updated>2019-11-20T07:33:33.699Z</updated>
    
    <content type="html"><![CDATA[<p>难得上数据库的课到机房上课，这波老师还是又把怎么安装mysql讲了一遍，还行本来我是准备在群里划水的，但是转念一想，还是在deepin上装一个mysql来折腾折腾。</p><p>安装其实还是蛮简单的就是，中间遇到了不少的小问题</p><h2 id="安装MySQL服务"><a href="#安装MySQL服务" class="headerlink" title="安装MySQL服务"></a>安装MySQL服务</h2><p>安装命令如下：</p><pre><code>sudo apt-get install mysql-server</code></pre><p>然后就是还可以安装一个mysql的管理工具</p><pre><code>sudo apt-get install mysql-client</code></pre><p>然后输入</p><pre><code>mysql -uroot -p</code></pre><p>就可以进入mysql了，默认是没有密码的</p><p>但是中间我还遇到了其他的问题要我更新软件源<br>这个还是没有问题</p><pre><code>sudo apt-get update</code></pre><h2 id="安装MySQL的workbench"><a href="#安装MySQL的workbench" class="headerlink" title="安装MySQL的workbench"></a>安装MySQL的workbench</h2><p><b>这是一个mysql自带的管理工具</b><br>官网下载deb后缀的文件，双击就可以打开了</p><h3 id="使用workbench遇到的问题"><a href="#使用workbench遇到的问题" class="headerlink" title="使用workbench遇到的问题"></a>使用workbench遇到的问题</h3><p>我在命令行可以正常的使用mysql，但是到了MySQLworkbench就用不了了，真的是无语。</p><p>后面还是让我们的老师看了一下，他说是用户的缺失，要我添加一个新的mysql用户<br>root@local不存在，当前只有一个用户，也就是<a href="mailto:root@127.0.0.1" target="_blank" rel="noopener">root@127.0.0.1</a>  也就是说localhost 并没有映射到localhost<br>上面。<br>一般的mysql一般会存在默认的几个用户</p><h4 id="添加mysql用户"><a href="#添加mysql用户" class="headerlink" title="添加mysql用户"></a>添加mysql用户</h4><p>例如这个就是添加一个名为admin的用户，映射的地址为localhost，密码为123456</p><pre><code>create user &#39;admin&#39;@&#39;localhost&#39; identified by &#39;123456&#39;;  </code></pre><p>修改密码</p><pre><code>set password for admin=password(&#39;password&#39;);  </code></pre><h4 id="授予权限（非常重要）"><a href="#授予权限（非常重要）" class="headerlink" title="授予权限（非常重要）"></a>授予权限（非常重要）</h4><p>这里我是吃了一次亏<br>我这里是有一次没有给用户授权，结果在workbench里面我试图创建数据库都没有权限，真的是可恶(〃＞皿＜)</p><pre><code> grant all on tiku.* to admin;  </code></pre><p>查看用户的权限</p><pre><code>show grants for kuke;  </code></pre><p>然后要记得更新数据库</p><pre><code>flush privileges; </code></pre><h2 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h2><p>显示所有的数据库</p><pre><code>show databases;</code></pre><p>使用数据库</p><pre><code>use 数据库的名字;</code></pre><p>创建数据库</p><pre><code>create 数据库的名字;</code></pre><h2 id="幕后（其他）"><a href="#幕后（其他）" class="headerlink" title="幕后（其他）"></a>幕后（其他）</h2><p>说起来这节课我还和老师聊了一下，感觉还是蛮开心的<br>一开始我就是问老师这个问题，然后老师看了一下，操作一波说是这个用户缺失的问题。<br>后面聊着聊着就聊到了我这个操作系统deepin </p><p>然后发现我这个电脑是双系统，问了我这些东西是不是都是自己搞的，我说是的，都是自己折腾的。<br>还问了一下我对于这个以后的职业生涯的规划。有没有想法搞Linux运维，我是回答暂时还是没有想法</p><p>我这个人嘛，说实话暂时还是没有什么好的看法，大体上还是搞计算机。说实话，这个东西还是蛮有意思的。折腾来折腾去。可能人生的意义就在于此吧。</p><p>然后老师还鼓励我尽可能的手动去编译那些源码，去了解这些底层的东西，而不是去使用那些封装好的东西。像是mysql。Nginx这些东西。<br>说起了我还是第一次听说Nginx这个东西。老师跟我说是web三件套。Linux、linux、nginx 想来这个东西应该是很重要的东西吧。都跟这些在一块了。要学的东西还有好多啊。真的是</p><p>这波表扬要还是很开心的，就是说我这个劲头不错继续保持下去。说不定以后真的可以变成大佬啊<br>就是看看十年可以成为一个大佬吗，真的不知道我以后会怎么样</p><p>十年一个全栈工程师怎么样。。。。。</p><p>有一句话我不记得在哪里看过了<br><strong><em>就是，当你不知道如何选择的时候你就选择最难走的那一条路。</em></strong></p>]]></content>
    
    <summary type="html">
    
      文章描述
    
    </summary>
    
      <category term="文件夹归类" scheme="/categories/%E6%96%87%E4%BB%B6%E5%A4%B9%E5%BD%92%E7%B1%BB/"/>
    
    
      <category term="标签" scheme="/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>deepin的体验</title>
    <link href="/2019/10/16/deepin%E4%BD%93%E9%AA%8C%E4%BA%86%E5%87%A0%E5%A4%A9%E5%90%8E/"/>
    <id>/2019/10/16/deepin体验了几天后/</id>
    <published>2019-10-16T13:43:46.000Z</published>
    <updated>2019-10-22T12:11:59.328Z</updated>
    
    <content type="html"><![CDATA[<p>体验了一段时间的deepin<br>多多少少也学了不少的东西</p><p>有时候真的是想着<br><del>要是有人带着我搞学习就好了（一对一的那种,最好是妹子)</del></p><h2 id="第一次初始化deepin"><a href="#第一次初始化deepin" class="headerlink" title="第一次初始化deepin"></a>第一次初始化deepin</h2><h3 id="设置root（必备"><a href="#设置root（必备" class="headerlink" title="设置root（必备"></a>设置root（必备</h3><p>deepin装好了后肯定就是设置管理员权限啦</p><pre><code>sudo passwd root</code></pre><p><img src alt></p><h3 id="科学上网（必备"><a href="#科学上网（必备" class="headerlink" title="科学上网（必备"></a>科学上网（必备</h3><p>其实不难发现，应用商店里面有一个shadowsock  但是我用了一下，感觉还是不是很好用。（反正我是没有使用成功）</p><p>所以我用了一个GitHub的项目，是GUI的界面十分的友好，操作也简单</p><p><a href="https://github.com/Myfanqie/electron-ssr-backup" target="_blank" rel="noopener">点这里跳转</a><br>原作者已经把项目删除了，你觉得可以的话可以fork一份</p><p>其实还可以使用命令行的科学上网但是太复杂了我就不写了（手动狗头</p><h2 id="其他的安装（可选"><a href="#其他的安装（可选" class="headerlink" title="其他的安装（可选"></a>其他的安装（可选</h2><h4 id="安装Gdebi"><a href="#安装Gdebi" class="headerlink" title="安装Gdebi"></a>安装Gdebi</h4><pre><code>sudo apt-get install gdebi</code></pre><h4 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h4><pre><code>sudo apt-get install git</code></pre><h4 id="安装vim"><a href="#安装vim" class="headerlink" title="安装vim"></a>安装vim</h4><pre><code>sudo apt-get install vim</code></pre><h4 id="安装Curl和tsocks-jq"><a href="#安装Curl和tsocks-jq" class="headerlink" title="安装Curl和tsocks,jq"></a>安装Curl和tsocks,jq</h4><pre><code>sudo apt-get install curl tscocks jq</code></pre><h3 id="Google-Chrome"><a href="#Google-Chrome" class="headerlink" title="Google Chrome"></a>Google Chrome</h3><p>推荐主题 No man’s Sky Theme<br>推荐插件 油猴插件 划词翻译</p><h2 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h2><h4 id="安装Gnome-tweak-tool"><a href="#安装Gnome-tweak-tool" class="headerlink" title="安装Gnome-tweak-tool"></a>安装Gnome-tweak-tool</h4><pre><code>sudo apt-get install gnome-tweak-tool</code></pre><p>换个好看点的壁纸吧</p><h2 id="目前已知的bug"><a href="#目前已知的bug" class="headerlink" title="目前已知的bug"></a>目前已知的bug</h2><ol><li><p>笔记本的亮度异常开机的时候很亮，然后到了登录界面的时候就变得很暗，这个就非常的难受</p><p>解决方法：将笔记本的屏幕关上，然后过一下子再打开这样子的话亮度就正常了</p></li><li><p>突然宕机（原因不明）</p></li></ol><p>解决方案： 目前只有重启</p><ol start="3"><li>打字的时候光标乱跳</li></ol><p>解决方案： 暂时的方案是，将触摸板禁用（可能是我打字的时候碰到了触摸板，但是win下面没有这种情况</p><ol start="4"><li>qq收藏的表情不见了</li></ol><p>暂时没有解决方案，我也不知道为什么</p><p><b>希望厂商尽快跟进，虽然看不到我的这个文章</b></p>]]></content>
    
    <summary type="html">
    
      文章描述
    
    </summary>
    
      <category term="文件夹归类" scheme="/categories/%E6%96%87%E4%BB%B6%E5%A4%B9%E5%BD%92%E7%B1%BB/"/>
    
    
      <category term="标签" scheme="/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
</feed>
